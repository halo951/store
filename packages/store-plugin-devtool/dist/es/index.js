/** @cp0/store-plugin-devtool
 *
 * @author halo951
 * @license MIT
 */
import{setupDevtoolsPlugin as e}from"@vue/devtools-api";class t{store;onBindedToVue(t,o){this.store=t,e({id:"org.d1t.store",packageName:"Store",label:"Store",homepage:"https://github.com/halo951/store",logo:void 0,app:o,componentStateTypes:["store plugin state"],settings:{}},(e=>{this.registerNodeTree(e),this.registerTimeline(e)}))}registerNodeTree(e){e.addInspector({id:"org.d1t.store.NodeTree",label:"Store",icon:"storage",treeFilterPlaceholder:"search store node...",noSelectionText:"no data",nodeActions:[]}),e.on.getInspectorTree((e=>{if(!("org.d1t.store.NodeTree"===e.inspectorId))return;const t=this.generateStoreCacheNodeTree(e.filter);e.rootNodes=[{id:"manager",label:"manager"},{id:"modules",label:"modules",tags:[{label:"count:"+t.length,textColor:16777215,backgroundColor:4476246}],children:[...t]}]})),e.on.getInspectorState((e=>{if(!("org.d1t.store.NodeTree"===e.inspectorId))return;const[t,o]=e.nodeId.split(".");switch(t){case"manager":return void(e.state=this.generateManagerState());case"modules":default:return void(e.state={});case"module":return void(e.state=o?this.generateModuleState(o):{})}})),e.on.editInspectorState((e=>{if("org.d1t.store.NodeTree"===e.inspectorId){if("manager"===e.type){const[,t]=e.path,{value:o}=e.state,r=e.path.slice(2);this.store[t].commit(r,o)}if("state"===e.type){const t=e.nodeId.split(/\./)[1],{value:o}=e.state;this.store[t].commit(e.path,o)}}}))}generateStoreCacheNodeTree(e){const t=this.store.cache;return Object.keys(t.keys).map((e=>({id:"module."+e,label:e}))).filter((t=>{if(!e)return!0;const o=new RegExp(e);return!!o.test(t.label)||!!o.test(JSON.stringify(this.generateModuleState(t.label)))}))}generateManagerState(){const e=this.store.plugins;return{manager:[{key:"version",value:this.store.options.version},{key:"cache",value:this.store.cache.data,editable:!0},{key:"plugins",value:e.map((e=>e.__proto__.constructor.name))}]}}generateModuleState(e){const t=this.store[e],o=t.state;return{getter:Object.getOwnPropertyNames(t.__proto__).map((e=>({key:e,value:null}))).filter((e=>{const o=-1!==["constructor","initData"].indexOf(e.key),r="function"==typeof t[e.key];return!(o||r)})).map((e=>(e.value=t[e.key],e))),state:Object.keys(o).map((e=>({key:e,value:o[e],editable:!0}))),options:[{key:"PERSISTENCE_KEYS",value:t.PERSISTENCE_KEYS}]}}registerTimeline(e){e.addTimelineLayer({id:"org.d1t.store.NodeTree",label:"Store Timeline",color:15351021})}}export{t as StoreDevtoolPlugin};
